//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.04.07 at 05:24:21 PM ICT 
//


package com.sonic.aoeleague.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for aoeRequest complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="aoeRequest">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="matchIndex" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="inputText" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="score" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="match" type="{}match" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "aoeRequest", propOrder = {
    "matchIndex",
    "inputText",
    "name",
    "score",
    "match"
})
public class AoeRequest
    implements Cloneable, CopyTo, Equals, HashCode
{

    protected Integer matchIndex;
    protected String inputText;
    protected String name;
    protected String score;
    protected Match match;

    /**
     * Gets the value of the matchIndex property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMatchIndex() {
        return matchIndex;
    }

    /**
     * Sets the value of the matchIndex property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMatchIndex(Integer value) {
        this.matchIndex = value;
    }

    /**
     * Gets the value of the inputText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getInputText() {
        return inputText;
    }

    /**
     * Sets the value of the inputText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInputText(String value) {
        this.inputText = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the score property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getScore() {
        return score;
    }

    /**
     * Sets the value of the score property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setScore(String value) {
        this.score = value;
    }

    /**
     * Gets the value of the match property.
     * 
     * @return
     *     possible object is
     *     {@link Match }
     *     
     */
    public Match getMatch() {
        return match;
    }

    /**
     * Sets the value of the match property.
     * 
     * @param value
     *     allowed object is
     *     {@link Match }
     *     
     */
    public void setMatch(Match value) {
        this.match = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AoeRequest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AoeRequest that = ((AoeRequest) object);
        {
            Integer lhsMatchIndex;
            lhsMatchIndex = this.getMatchIndex();
            Integer rhsMatchIndex;
            rhsMatchIndex = that.getMatchIndex();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "matchIndex", lhsMatchIndex), LocatorUtils.property(thatLocator, "matchIndex", rhsMatchIndex), lhsMatchIndex, rhsMatchIndex)) {
                return false;
            }
        }
        {
            String lhsInputText;
            lhsInputText = this.getInputText();
            String rhsInputText;
            rhsInputText = that.getInputText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "inputText", lhsInputText), LocatorUtils.property(thatLocator, "inputText", rhsInputText), lhsInputText, rhsInputText)) {
                return false;
            }
        }
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            String lhsScore;
            lhsScore = this.getScore();
            String rhsScore;
            rhsScore = that.getScore();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "score", lhsScore), LocatorUtils.property(thatLocator, "score", rhsScore), lhsScore, rhsScore)) {
                return false;
            }
        }
        {
            Match lhsMatch;
            lhsMatch = this.getMatch();
            Match rhsMatch;
            rhsMatch = that.getMatch();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "match", lhsMatch), LocatorUtils.property(thatLocator, "match", rhsMatch), lhsMatch, rhsMatch)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Integer theMatchIndex;
            theMatchIndex = this.getMatchIndex();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "matchIndex", theMatchIndex), currentHashCode, theMatchIndex);
        }
        {
            String theInputText;
            theInputText = this.getInputText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "inputText", theInputText), currentHashCode, theInputText);
        }
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            String theScore;
            theScore = this.getScore();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "score", theScore), currentHashCode, theScore);
        }
        {
            Match theMatch;
            theMatch = this.getMatch();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "match", theMatch), currentHashCode, theMatch);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AoeRequest) {
            final AoeRequest copy = ((AoeRequest) draftCopy);
            if (this.matchIndex!= null) {
                Integer sourceMatchIndex;
                sourceMatchIndex = this.getMatchIndex();
                Integer copyMatchIndex = ((Integer) strategy.copy(LocatorUtils.property(locator, "matchIndex", sourceMatchIndex), sourceMatchIndex));
                copy.setMatchIndex(copyMatchIndex);
            } else {
                copy.matchIndex = null;
            }
            if (this.inputText!= null) {
                String sourceInputText;
                sourceInputText = this.getInputText();
                String copyInputText = ((String) strategy.copy(LocatorUtils.property(locator, "inputText", sourceInputText), sourceInputText));
                copy.setInputText(copyInputText);
            } else {
                copy.inputText = null;
            }
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.score!= null) {
                String sourceScore;
                sourceScore = this.getScore();
                String copyScore = ((String) strategy.copy(LocatorUtils.property(locator, "score", sourceScore), sourceScore));
                copy.setScore(copyScore);
            } else {
                copy.score = null;
            }
            if (this.match!= null) {
                Match sourceMatch;
                sourceMatch = this.getMatch();
                Match copyMatch = ((Match) strategy.copy(LocatorUtils.property(locator, "match", sourceMatch), sourceMatch));
                copy.setMatch(copyMatch);
            } else {
                copy.match = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AoeRequest();
    }

}
