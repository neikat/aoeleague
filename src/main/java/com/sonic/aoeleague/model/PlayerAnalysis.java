//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.04.07 at 05:24:21 PM ICT 
//


package com.sonic.aoeleague.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for playerAnalysis complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="playerAnalysis">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="matchQuantity" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="winQuantity" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="loseQuantity" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="winRateQuantity" type="{http://www.w3.org/2001/XMLSchema}double"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "playerAnalysis", propOrder = {
    "matchQuantity",
    "winQuantity",
    "loseQuantity",
    "winRateQuantity"
})
public class PlayerAnalysis
    implements Cloneable, CopyTo, Equals, HashCode
{

    protected int matchQuantity;
    protected int winQuantity;
    protected int loseQuantity;
    protected double winRateQuantity;

    /**
     * Gets the value of the matchQuantity property.
     * 
     */
    public int getMatchQuantity() {
        return matchQuantity;
    }

    /**
     * Sets the value of the matchQuantity property.
     * 
     */
    public void setMatchQuantity(int value) {
        this.matchQuantity = value;
    }

    /**
     * Gets the value of the winQuantity property.
     * 
     */
    public int getWinQuantity() {
        return winQuantity;
    }

    /**
     * Sets the value of the winQuantity property.
     * 
     */
    public void setWinQuantity(int value) {
        this.winQuantity = value;
    }

    /**
     * Gets the value of the loseQuantity property.
     * 
     */
    public int getLoseQuantity() {
        return loseQuantity;
    }

    /**
     * Sets the value of the loseQuantity property.
     * 
     */
    public void setLoseQuantity(int value) {
        this.loseQuantity = value;
    }

    /**
     * Gets the value of the winRateQuantity property.
     * 
     */
    public double getWinRateQuantity() {
        return winRateQuantity;
    }

    /**
     * Sets the value of the winRateQuantity property.
     * 
     */
    public void setWinRateQuantity(double value) {
        this.winRateQuantity = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PlayerAnalysis)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PlayerAnalysis that = ((PlayerAnalysis) object);
        {
            int lhsMatchQuantity;
            lhsMatchQuantity = (true?this.getMatchQuantity(): 0);
            int rhsMatchQuantity;
            rhsMatchQuantity = (true?that.getMatchQuantity(): 0);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "matchQuantity", lhsMatchQuantity), LocatorUtils.property(thatLocator, "matchQuantity", rhsMatchQuantity), lhsMatchQuantity, rhsMatchQuantity)) {
                return false;
            }
        }
        {
            int lhsWinQuantity;
            lhsWinQuantity = (true?this.getWinQuantity(): 0);
            int rhsWinQuantity;
            rhsWinQuantity = (true?that.getWinQuantity(): 0);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "winQuantity", lhsWinQuantity), LocatorUtils.property(thatLocator, "winQuantity", rhsWinQuantity), lhsWinQuantity, rhsWinQuantity)) {
                return false;
            }
        }
        {
            int lhsLoseQuantity;
            lhsLoseQuantity = (true?this.getLoseQuantity(): 0);
            int rhsLoseQuantity;
            rhsLoseQuantity = (true?that.getLoseQuantity(): 0);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "loseQuantity", lhsLoseQuantity), LocatorUtils.property(thatLocator, "loseQuantity", rhsLoseQuantity), lhsLoseQuantity, rhsLoseQuantity)) {
                return false;
            }
        }
        {
            double lhsWinRateQuantity;
            lhsWinRateQuantity = (true?this.getWinRateQuantity(): 0.0D);
            double rhsWinRateQuantity;
            rhsWinRateQuantity = (true?that.getWinRateQuantity(): 0.0D);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "winRateQuantity", lhsWinRateQuantity), LocatorUtils.property(thatLocator, "winRateQuantity", rhsWinRateQuantity), lhsWinRateQuantity, rhsWinRateQuantity)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theMatchQuantity;
            theMatchQuantity = (true?this.getMatchQuantity(): 0);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "matchQuantity", theMatchQuantity), currentHashCode, theMatchQuantity);
        }
        {
            int theWinQuantity;
            theWinQuantity = (true?this.getWinQuantity(): 0);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "winQuantity", theWinQuantity), currentHashCode, theWinQuantity);
        }
        {
            int theLoseQuantity;
            theLoseQuantity = (true?this.getLoseQuantity(): 0);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "loseQuantity", theLoseQuantity), currentHashCode, theLoseQuantity);
        }
        {
            double theWinRateQuantity;
            theWinRateQuantity = (true?this.getWinRateQuantity(): 0.0D);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "winRateQuantity", theWinRateQuantity), currentHashCode, theWinRateQuantity);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PlayerAnalysis) {
            final PlayerAnalysis copy = ((PlayerAnalysis) draftCopy);
            int sourceMatchQuantity;
            sourceMatchQuantity = (true?this.getMatchQuantity(): 0);
            int copyMatchQuantity = strategy.copy(LocatorUtils.property(locator, "matchQuantity", sourceMatchQuantity), sourceMatchQuantity);
            copy.setMatchQuantity(copyMatchQuantity);
            int sourceWinQuantity;
            sourceWinQuantity = (true?this.getWinQuantity(): 0);
            int copyWinQuantity = strategy.copy(LocatorUtils.property(locator, "winQuantity", sourceWinQuantity), sourceWinQuantity);
            copy.setWinQuantity(copyWinQuantity);
            int sourceLoseQuantity;
            sourceLoseQuantity = (true?this.getLoseQuantity(): 0);
            int copyLoseQuantity = strategy.copy(LocatorUtils.property(locator, "loseQuantity", sourceLoseQuantity), sourceLoseQuantity);
            copy.setLoseQuantity(copyLoseQuantity);
            double sourceWinRateQuantity;
            sourceWinRateQuantity = (true?this.getWinRateQuantity(): 0.0D);
            double copyWinRateQuantity = strategy.copy(LocatorUtils.property(locator, "winRateQuantity", sourceWinRateQuantity), sourceWinRateQuantity);
            copy.setWinRateQuantity(copyWinRateQuantity);
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PlayerAnalysis();
    }

}
