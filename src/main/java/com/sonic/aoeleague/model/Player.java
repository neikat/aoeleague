//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.04.07 at 05:24:21 PM ICT 
//


package com.sonic.aoeleague.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for player complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="player">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="avatar" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="rank" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       &lt;attribute name="playerPoint" type="{http://www.w3.org/2001/XMLSchema}double" />
 *       &lt;attribute name="top" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       &lt;attribute name="type" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "player", propOrder = {
    "avatar"
})
public class Player
    implements Cloneable, CopyTo, Equals, HashCode
{

    protected String avatar;
    @XmlAttribute(name = "id")
    protected Integer id;
    @XmlAttribute(name = "name")
    protected String name;
    @XmlAttribute(name = "rank")
    protected Integer rank;
    @XmlAttribute(name = "playerPoint")
    protected Double playerPoint;
    @XmlAttribute(name = "top")
    protected Integer top;
    @XmlAttribute(name = "type")
    protected String type;

    /**
     * Gets the value of the avatar property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAvatar() {
        return avatar;
    }

    /**
     * Sets the value of the avatar property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAvatar(String value) {
        this.avatar = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setId(Integer value) {
        this.id = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the rank property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getRank() {
        return rank;
    }

    /**
     * Sets the value of the rank property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setRank(Integer value) {
        this.rank = value;
    }

    /**
     * Gets the value of the playerPoint property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getPlayerPoint() {
        return playerPoint;
    }

    /**
     * Sets the value of the playerPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setPlayerPoint(Double value) {
        this.playerPoint = value;
    }

    /**
     * Gets the value of the top property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getTop() {
        return top;
    }

    /**
     * Sets the value of the top property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setTop(Integer value) {
        this.top = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Player)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Player that = ((Player) object);
        {
            String lhsAvatar;
            lhsAvatar = this.getAvatar();
            String rhsAvatar;
            rhsAvatar = that.getAvatar();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "avatar", lhsAvatar), LocatorUtils.property(thatLocator, "avatar", rhsAvatar), lhsAvatar, rhsAvatar)) {
                return false;
            }
        }
        {
            Integer lhsId;
            lhsId = this.getId();
            Integer rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            Integer lhsRank;
            lhsRank = this.getRank();
            Integer rhsRank;
            rhsRank = that.getRank();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rank", lhsRank), LocatorUtils.property(thatLocator, "rank", rhsRank), lhsRank, rhsRank)) {
                return false;
            }
        }
        {
            Double lhsPlayerPoint;
            lhsPlayerPoint = this.getPlayerPoint();
            Double rhsPlayerPoint;
            rhsPlayerPoint = that.getPlayerPoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "playerPoint", lhsPlayerPoint), LocatorUtils.property(thatLocator, "playerPoint", rhsPlayerPoint), lhsPlayerPoint, rhsPlayerPoint)) {
                return false;
            }
        }
        {
            Integer lhsTop;
            lhsTop = this.getTop();
            Integer rhsTop;
            rhsTop = that.getTop();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "top", lhsTop), LocatorUtils.property(thatLocator, "top", rhsTop), lhsTop, rhsTop)) {
                return false;
            }
        }
        {
            String lhsType;
            lhsType = this.getType();
            String rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theAvatar;
            theAvatar = this.getAvatar();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "avatar", theAvatar), currentHashCode, theAvatar);
        }
        {
            Integer theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            Integer theRank;
            theRank = this.getRank();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rank", theRank), currentHashCode, theRank);
        }
        {
            Double thePlayerPoint;
            thePlayerPoint = this.getPlayerPoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "playerPoint", thePlayerPoint), currentHashCode, thePlayerPoint);
        }
        {
            Integer theTop;
            theTop = this.getTop();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "top", theTop), currentHashCode, theTop);
        }
        {
            String theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Player) {
            final Player copy = ((Player) draftCopy);
            if (this.avatar!= null) {
                String sourceAvatar;
                sourceAvatar = this.getAvatar();
                String copyAvatar = ((String) strategy.copy(LocatorUtils.property(locator, "avatar", sourceAvatar), sourceAvatar));
                copy.setAvatar(copyAvatar);
            } else {
                copy.avatar = null;
            }
            if (this.id!= null) {
                Integer sourceId;
                sourceId = this.getId();
                Integer copyId = ((Integer) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                copy.setId(copyId);
            } else {
                copy.id = null;
            }
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.rank!= null) {
                Integer sourceRank;
                sourceRank = this.getRank();
                Integer copyRank = ((Integer) strategy.copy(LocatorUtils.property(locator, "rank", sourceRank), sourceRank));
                copy.setRank(copyRank);
            } else {
                copy.rank = null;
            }
            if (this.playerPoint!= null) {
                Double sourcePlayerPoint;
                sourcePlayerPoint = this.getPlayerPoint();
                Double copyPlayerPoint = ((Double) strategy.copy(LocatorUtils.property(locator, "playerPoint", sourcePlayerPoint), sourcePlayerPoint));
                copy.setPlayerPoint(copyPlayerPoint);
            } else {
                copy.playerPoint = null;
            }
            if (this.top!= null) {
                Integer sourceTop;
                sourceTop = this.getTop();
                Integer copyTop = ((Integer) strategy.copy(LocatorUtils.property(locator, "top", sourceTop), sourceTop));
                copy.setTop(copyTop);
            } else {
                copy.top = null;
            }
            if (this.type!= null) {
                String sourceType;
                sourceType = this.getType();
                String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                copy.setType(copyType);
            } else {
                copy.type = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Player();
    }

}
