//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.04.07 at 05:24:21 PM ICT 
//


package com.sonic.aoeleague.model;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for updateLog complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="updateLog">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="updatePlayers" type="{}updatePlayer" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       &lt;attribute name="matchId" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "updateLog", propOrder = {
    "updatePlayers"
})
public class UpdateLog
    implements Cloneable, CopyTo, Equals, HashCode
{

    protected List<UpdatePlayer> updatePlayers;
    @XmlAttribute(name = "id")
    protected Integer id;
    @XmlAttribute(name = "matchId")
    protected String matchId;

    /**
     * Gets the value of the updatePlayers property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the updatePlayers property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUpdatePlayers().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UpdatePlayer }
     * 
     * 
     */
    public List<UpdatePlayer> getUpdatePlayers() {
        if (updatePlayers == null) {
            updatePlayers = new ArrayList<UpdatePlayer>();
        }
        return this.updatePlayers;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setId(Integer value) {
        this.id = value;
    }

    /**
     * Gets the value of the matchId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMatchId() {
        return matchId;
    }

    /**
     * Sets the value of the matchId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMatchId(String value) {
        this.matchId = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof UpdateLog)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final UpdateLog that = ((UpdateLog) object);
        {
            List<UpdatePlayer> lhsUpdatePlayers;
            lhsUpdatePlayers = (((this.updatePlayers!= null)&&(!this.updatePlayers.isEmpty()))?this.getUpdatePlayers():null);
            List<UpdatePlayer> rhsUpdatePlayers;
            rhsUpdatePlayers = (((that.updatePlayers!= null)&&(!that.updatePlayers.isEmpty()))?that.getUpdatePlayers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "updatePlayers", lhsUpdatePlayers), LocatorUtils.property(thatLocator, "updatePlayers", rhsUpdatePlayers), lhsUpdatePlayers, rhsUpdatePlayers)) {
                return false;
            }
        }
        {
            Integer lhsId;
            lhsId = this.getId();
            Integer rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        {
            String lhsMatchId;
            lhsMatchId = this.getMatchId();
            String rhsMatchId;
            rhsMatchId = that.getMatchId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "matchId", lhsMatchId), LocatorUtils.property(thatLocator, "matchId", rhsMatchId), lhsMatchId, rhsMatchId)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<UpdatePlayer> theUpdatePlayers;
            theUpdatePlayers = (((this.updatePlayers!= null)&&(!this.updatePlayers.isEmpty()))?this.getUpdatePlayers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "updatePlayers", theUpdatePlayers), currentHashCode, theUpdatePlayers);
        }
        {
            Integer theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        {
            String theMatchId;
            theMatchId = this.getMatchId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "matchId", theMatchId), currentHashCode, theMatchId);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof UpdateLog) {
            final UpdateLog copy = ((UpdateLog) draftCopy);
            if ((this.updatePlayers!= null)&&(!this.updatePlayers.isEmpty())) {
                List<UpdatePlayer> sourceUpdatePlayers;
                sourceUpdatePlayers = (((this.updatePlayers!= null)&&(!this.updatePlayers.isEmpty()))?this.getUpdatePlayers():null);
                @SuppressWarnings("unchecked")
                List<UpdatePlayer> copyUpdatePlayers = ((List<UpdatePlayer> ) strategy.copy(LocatorUtils.property(locator, "updatePlayers", sourceUpdatePlayers), sourceUpdatePlayers));
                copy.updatePlayers = null;
                if (copyUpdatePlayers!= null) {
                    List<UpdatePlayer> uniqueUpdatePlayersl = copy.getUpdatePlayers();
                    uniqueUpdatePlayersl.addAll(copyUpdatePlayers);
                }
            } else {
                copy.updatePlayers = null;
            }
            if (this.id!= null) {
                Integer sourceId;
                sourceId = this.getId();
                Integer copyId = ((Integer) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                copy.setId(copyId);
            } else {
                copy.id = null;
            }
            if (this.matchId!= null) {
                String sourceMatchId;
                sourceMatchId = this.getMatchId();
                String copyMatchId = ((String) strategy.copy(LocatorUtils.property(locator, "matchId", sourceMatchId), sourceMatchId));
                copy.setMatchId(copyMatchId);
            } else {
                copy.matchId = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new UpdateLog();
    }

}
