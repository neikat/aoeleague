//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.04.07 at 05:24:21 PM ICT 
//


package com.sonic.aoeleague.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for newbieGraphElement complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="newbieGraphElement">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="matchId" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="result" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       &lt;attribute name="assumedPlayerPoint" type="{http://www.w3.org/2001/XMLSchema}double" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "newbieGraphElement")
public class NewbieGraphElement
    implements Cloneable, CopyTo, Equals, HashCode
{

    @XmlAttribute(name = "matchId")
    protected String matchId;
    @XmlAttribute(name = "result")
    protected Integer result;
    @XmlAttribute(name = "assumedPlayerPoint")
    protected Double assumedPlayerPoint;

    /**
     * Gets the value of the matchId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMatchId() {
        return matchId;
    }

    /**
     * Sets the value of the matchId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMatchId(String value) {
        this.matchId = value;
    }

    /**
     * Gets the value of the result property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getResult() {
        return result;
    }

    /**
     * Sets the value of the result property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setResult(Integer value) {
        this.result = value;
    }

    /**
     * Gets the value of the assumedPlayerPoint property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getAssumedPlayerPoint() {
        return assumedPlayerPoint;
    }

    /**
     * Sets the value of the assumedPlayerPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setAssumedPlayerPoint(Double value) {
        this.assumedPlayerPoint = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof NewbieGraphElement)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final NewbieGraphElement that = ((NewbieGraphElement) object);
        {
            String lhsMatchId;
            lhsMatchId = this.getMatchId();
            String rhsMatchId;
            rhsMatchId = that.getMatchId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "matchId", lhsMatchId), LocatorUtils.property(thatLocator, "matchId", rhsMatchId), lhsMatchId, rhsMatchId)) {
                return false;
            }
        }
        {
            Integer lhsResult;
            lhsResult = this.getResult();
            Integer rhsResult;
            rhsResult = that.getResult();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "result", lhsResult), LocatorUtils.property(thatLocator, "result", rhsResult), lhsResult, rhsResult)) {
                return false;
            }
        }
        {
            Double lhsAssumedPlayerPoint;
            lhsAssumedPlayerPoint = this.getAssumedPlayerPoint();
            Double rhsAssumedPlayerPoint;
            rhsAssumedPlayerPoint = that.getAssumedPlayerPoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "assumedPlayerPoint", lhsAssumedPlayerPoint), LocatorUtils.property(thatLocator, "assumedPlayerPoint", rhsAssumedPlayerPoint), lhsAssumedPlayerPoint, rhsAssumedPlayerPoint)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theMatchId;
            theMatchId = this.getMatchId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "matchId", theMatchId), currentHashCode, theMatchId);
        }
        {
            Integer theResult;
            theResult = this.getResult();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "result", theResult), currentHashCode, theResult);
        }
        {
            Double theAssumedPlayerPoint;
            theAssumedPlayerPoint = this.getAssumedPlayerPoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "assumedPlayerPoint", theAssumedPlayerPoint), currentHashCode, theAssumedPlayerPoint);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof NewbieGraphElement) {
            final NewbieGraphElement copy = ((NewbieGraphElement) draftCopy);
            if (this.matchId!= null) {
                String sourceMatchId;
                sourceMatchId = this.getMatchId();
                String copyMatchId = ((String) strategy.copy(LocatorUtils.property(locator, "matchId", sourceMatchId), sourceMatchId));
                copy.setMatchId(copyMatchId);
            } else {
                copy.matchId = null;
            }
            if (this.result!= null) {
                Integer sourceResult;
                sourceResult = this.getResult();
                Integer copyResult = ((Integer) strategy.copy(LocatorUtils.property(locator, "result", sourceResult), sourceResult));
                copy.setResult(copyResult);
            } else {
                copy.result = null;
            }
            if (this.assumedPlayerPoint!= null) {
                Double sourceAssumedPlayerPoint;
                sourceAssumedPlayerPoint = this.getAssumedPlayerPoint();
                Double copyAssumedPlayerPoint = ((Double) strategy.copy(LocatorUtils.property(locator, "assumedPlayerPoint", sourceAssumedPlayerPoint), sourceAssumedPlayerPoint));
                copy.setAssumedPlayerPoint(copyAssumedPlayerPoint);
            } else {
                copy.assumedPlayerPoint = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new NewbieGraphElement();
    }

}
